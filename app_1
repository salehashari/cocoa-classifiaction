from flask import Flask, render_template, request, jsonify, redirect, url_for, session, flash
from keras.models import load_model
from keras_preprocessing.image import load_img
from keras_preprocessing.image import img_to_array
from keras_applications.mobilenet_v2 import preprocess_input, decode_predictions, MobileNetV2
import tensorflow as tf
from skimage import transform, io
import numpy as np
import os
from PIL import Image
from datetime import datetime
from keras.preprocessing import image
from flask_cors import CORS
from functools import wraps
import zipfile
from werkzeug.utils import secure_filename

app = Flask(__name__)
app.secret_key = '#ADMIN1234'  # Required for session management

# Mock user database - in production, use a real database
USERS = {
    'admin@example.com': 'admin123'
}

# Login required decorator
def login_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'user' not in session:
            return redirect(url_for('login'))
        return f(*args, **kwargs)
    return decorated_function

#load model for prediction
modelxception = load_model("Kakao-Kakao-92.30.h5")

UPLOAD_FOLDER = 'static/uploads/'
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'gif', 'tiff', 'webp', 'jfif'}

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

# Login route
@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        email = request.form.get('email')
        password = request.form.get('password')
        
        if email in USERS and USERS[email] == password:
            session['user'] = email
            return redirect(url_for('main'))
        else:
            flash('Invalid credentials')
    
    return render_template('page-login.html')

# Logout route
@app.route('/logout')
def logout():
    session.pop('user', None)
    return redirect(url_for('login'))

# Protected routes
@app.route("/dashboard")
@login_required
def dashboard():
    return render_template("cnn.html")

@app.route("/")
@login_required
def main():
    return render_template("index.html")

@app.route("/classification")
@login_required
def classification():
    return render_template("classifications.html")

@app.route('/submit', methods=['POST'])
@login_required
def predict():
    if 'file' not in request.files:
        resp = jsonify({'message': 'No image in the request'})
        resp.status_code = 400
        return resp
    files = request.files.getlist('file')
    filename = "temp_image.png"
    errors = {}
    success = False
    for file in files:
        if file and allowed_file(file.filename):
            file.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))
            success = True
        else:
            errors["message"] = 'File type of {} is not allowed'.format(file.filename)

    if not success:
        resp = jsonify(errors)
        resp.status_code = 400
        return resp
    img_url = os.path.join(app.config['UPLOAD_FOLDER'], filename)

    # convert image to RGB
    img = Image.open(img_url).convert('RGB')
    now = datetime.now()
    predict_image_path = 'static/uploads/' + now.strftime("%d%m%y-%H%M%S") + ".png"
    image_predict = predict_image_path
    img.convert('RGB').save(image_predict, format="png")
    img.close()

    # prepare image for prediction
    img = image.load_img(predict_image_path, target_size=(128, 128, 3))
    x = image.img_to_array(img)
    x = x/127.5-1 
    x = np.expand_dims(x, axis=0)
    images = np.vstack([x])

    # predict
    prediction_array_xception = modelxception.predict(images)

    # prepare api response
    class_names = ['belum matang', 'matang', 'rusak']
    result = {
        "filename": predict_image_path,
        "prediction": class_names[np.argmax(prediction_array_xception)],
        "confidence": '{:2.0f}%'.format(100 * np.max(prediction_array_xception))
    }
    
    return render_template("classifications.html", 
                         img_path=predict_image_path,
                         predictionxception=class_names[np.argmax(prediction_array_xception)],
                         confidenceexception='{:2.0f}%'.format(100 * np.max(prediction_array_xception)))

if __name__ == '__main__':
    app.run(debug=True)